########## Problem Statement/Challenge ##########
# Modify Insertion Sort implementation
# to keep track of the number of shifts it makes while sorting?
# The only thing you should print is the number of shifts made by
# the algorithm to completely sort the array.
# A shift occurs when an element's position changes in the array.
# Do not shift an element if it is not necessary.


########## Input Format ##########
# The first line contains N, the number of elements to be sorted. The next line contains N integers a[1], a[2], ..., a[N].

### Sample:
# 5
# 2 1 3 1 2

########## Output Format ##########

# Output the number of shifts it takes to sort the array.

### Sample:

# 4

#################### Solution ####################

# define the function to calculate run time for insertion sort
def insertion_sort_time(l):
    counter = 0   #initializing counter
    for i in xrange(1,len(ar)):
        key =ar[i]
        j = i-1
        while (j>=0):
            if ar[j]>key:
                ar[j+1]=ar[j]
                ar[j]=key
                counter+=1
            j-=1
    return counter

#input section
m = input()
ar = [int(i) for i in raw_input().strip().split()]
print insertion_sort_time(ar)
